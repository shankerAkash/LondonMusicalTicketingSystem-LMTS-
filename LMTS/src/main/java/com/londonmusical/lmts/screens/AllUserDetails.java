/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.londonmusical.lmts.screens;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ektasingh
 */
public class AllUserDetails extends javax.swing.JInternalFrame {

    /**
     * Creates new form AllUserDetails
     */
    public AllUserDetails() {
        initComponents();
        getTableData();
    }

    public void getTableData() {

        String[] columns = {"Name", "User Name", "Email", "Type"};

        // Create table model
        DefaultTableModel model = new DefaultTableModel(columns, 0);

        try {
            // Establish a database connection
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/lmts", "root", "root");
            Statement stat = con.createStatement();
            String selectQuery = "SELECT * FROM ROOT.\"User\"";
            ResultSet rs = stat.executeQuery(selectQuery);

            // Populate the table model with data
            while (rs.next()) {

                String name = rs.getString("NAME");
                String username = rs.getString("USERNAME");
                String email = rs.getString("EMAIL");
                String type = rs.getString("TYPE");

                // Add a new row to the table model
                model.addRow(new Object[]{name, username, email, type});
            }

            // Close the result set, statement, and connection
            rs.close();
            stat.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching data from the database", "Error", JOptionPane.ERROR_MESSAGE);
        }

        userTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        saveUpdate = new javax.swing.JButton();

        userLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        userLabel.setText("All Users");

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(userTable);

        saveUpdate.setText("Update");
        saveUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(userLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addComponent(saveUpdate)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(userLabel)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveUpdate)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveUpdateActionPerformed
        // TODO add your handling code here:
        Object email = userTable.getValueAt(userTable.getSelectedRow(), 2);
        Object column = userTable.getColumnName(userTable.getSelectedColumn());
        Object value = userTable.getValueAt(userTable.getSelectedRow(), userTable.getSelectedColumn());

        try {
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/lmts", "root", "root");
            String updateQuery = "UPDATE ROOT.\"User\" SET " + column + " = '" + value + "' WHERE EMAIL = '" + email + "'";
            System.out.println(updateQuery);
            PreparedStatement preparedStatement = con.prepareStatement(updateQuery);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating value", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveUpdate;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
