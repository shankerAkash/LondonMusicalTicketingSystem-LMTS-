/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.londonmusical.lmts.screens;

import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ektasingh
 */
public class AllShowDetials extends javax.swing.JInternalFrame {

    /**
     * Creates new form AllShowDetials
     */
    public AllShowDetials() {
        initComponents();
        getTableData(showsTable);
    }

    public void getTableData(JTable showsTable) {

        String[] columns = {"Show_Id", "Name", "Run Time", "Categories", "Venue", "Student Price", "Adult Price", "Senior Price", "Create Date"};

        // Create table model
        DefaultTableModel model = new DefaultTableModel(columns, 0);

        try {
            // Establish a database connection
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/lmts", "root", "root");
            Statement stat = con.createStatement();
            String selectQuery = "SELECT * FROM ROOT.\"Shows\"";
            ResultSet rs = stat.executeQuery(selectQuery);

            // Populate the table model with data
            while (rs.next()) {

                int show_id = rs.getInt("SHOW_ID");
                String name = rs.getString("NAME");
                String runtime = rs.getString("RUNTIME");
                String categories = rs.getString("CATEGORIES");
                String venue = rs.getString("VENUE");
                String studentPrice = rs.getString("STUDENT_PRICE");
                String adultPrice = rs.getString("ADULT_PRICE");
                String seniorPrice = rs.getString("SENIOR_PRICE");
                String createdAt = rs.getString("CREATEDAT");

                // Add a new row to the table model
                model.addRow(new Object[]{show_id, name, runtime, categories, venue, studentPrice, adultPrice, seniorPrice, createdAt});
            }

            // Close the result set, statement, and connection
            rs.close();
            stat.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching data from the database", "Error", JOptionPane.ERROR_MESSAGE);
        }

        showsTable.setModel(model);
    }

    private static void deleteRecord(Connection connection, String id) throws SQLException {
        // Replace with your actual delete statement
        String deleteQuery = "DELETE FROM FROM ROOT.\"Shows\" WHERE show_id = '" + id + "'";
        try (PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery)) {
            preparedStatement.executeUpdate();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        showsTable = new javax.swing.JTable();
        showsLabel = new javax.swing.JLabel();
        deleteShowsButton = new javax.swing.JButton();

        showsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(showsTable);

        showsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        showsLabel.setText("All Shows");

        deleteShowsButton.setText("Delete Old Shows");
        deleteShowsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteShowsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(showsLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(235, 235, 235)
                        .addComponent(deleteShowsButton)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(showsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(deleteShowsButton)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteShowsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteShowsButtonActionPerformed
        // TODO add your handling code here:

        try {
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/lmts", "root", "root");
            Statement stat = con.createStatement();

            for (int i = 0; i < showsTable.getRowCount(); i++) {

                LocalDateTime date = LocalDateTime.parse(showsTable.getValueAt(i, 8).toString(), DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss"));
                if (date.isBefore(LocalDateTime.now().minusDays(30))) {
                    deleteRecord(con, showsTable.getValueAt(i, 0).toString());
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching data from the database", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_deleteShowsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteShowsButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel showsLabel;
    private javax.swing.JTable showsTable;
    // End of variables declaration//GEN-END:variables

    public void infoMessage(String message, String tittle) {
        JOptionPane.showMessageDialog(null, message, tittle, JOptionPane.INFORMATION_MESSAGE);
    }
}
